#ifndef CHARACTERS_H
#define CHARACTERS_H

#define DEFAULT_CHARACTERS

#include "flipper.h"
static const uint8_t characters[] = {
#ifdef DEFAULT_CHARACTERS
    // zero
    0b01110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b01110,
    // one
    0b00010,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00010,
    // two
    0b01110,
    0b11111,
    0b00011,
    0b00011,
    0b01111,
    0b11111,
    0b11110,
    0b11000,
    0b11000,
    0b11111,
    0b01110,
    // three
    0b01110,
    0b11111,
    0b00011,
    0b00011,
    0b00111,
    0b01110,
    0b00111,
    0b00011,
    0b00011,
    0b11111,
    0b01110,
    // four
    0b01010,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b01111,
    0b00011,
    0b00011,
    0b00011,
    0b00010,
    // five
    0b01110,
    0b11111,
    0b11000,
    0b11000,
    0b11110,
    0b11111,
    0b01111,
    0b00011,
    0b00011,
    0b11111,
    0b01110,
    // six
    0b01110,
    0b11100,
    0b11000,
    0b11000,
    0b11110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b01110,
    // seven
    0b01110,
    0b11111,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00010,
    // eight
    0b01110,
    0b11111,
    0b11011,
    0b11011,
    0b11111,
    0b01110,
    0b11111,
    0b11011,
    0b11011,
    0b11111,
    0b01110,
    // nine
    0b01110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b01111,
    0b00011,
    0b00011,
    0b00111,
    0b01110,
    // colon
    0b00000,
    0b00000,
    0b00000,
    0b01100,
    0b01100,
    0b00000,
    0b01100,
    0b01100,
    0b00000,
    0b00000,
    0b00000,
    // semicolon
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b00000,
    0b01100,
    0b01100,
    0b00000,
    0b01100,
    0b01100,
    0b00100,
    // less than
    0b00000,
    0b00001,
    0b00011,
    0b00110,
    0b01100,
    0b11000,
    0b01100,
    0b00110,
    0b00011,
    0b00001,
    0b00000,
    // equals
    0b00000,
    0b00000,
    0b00000,
    0b11111,
    0b11111,
    0b00000,
    0b11111,
    0b11111,
    0b00000,
    0b00000,
    0b00000,
    // greater than
    0b00000,
    0b10000,
    0b11000,
    0b01100,
    0b00110,
    0b00011,
    0b00110,
    0b01100,
    0b11000,
    0b10000,
    0b00000,
    // questionmark
    0b01110,
    0b11111,
    0b00011,
    0b00011,
    0b00111,
    0b01110,
    0b01100,
    0b01100,
    0b00000,
    0b01100,
    0b01100,
    // at sign
    0b00000,
    0b00000,
    0b11111,
    0b10001,
    0b10111,
    0b10011,
    0b10111,
    0b10111,
    0b10000,
    0b11110,
    0b00000,
    // A
    0b01110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b01010,
    // B
    0b11110,
    0b11111,
    0b11011,
    0b11011,
    0b11111,
    0b11110,
    0b11111,
    0b11011,
    0b11011,
    0b11111,
    0b11110,
    // C
    0b01110,
    0b11111,
    0b11011,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11011,
    0b11111,
    0b01110,
    // D
    0b11110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b11110,
    // E
    0b11111,
    0b11111,
    0b11000,
    0b11000,
    0b11110,
    0b11110,
    0b11000,
    0b11000,
    0b11000,
    0b11111,
    0b11111,
    // F
    0b11111,
    0b11111,
    0b11000,
    0b11000,
    0b11110,
    0b11110,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    // G
    0b01110,
    0b11111,
    0b11000,
    0b11000,
    0b11000,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b01110,
    // H
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    // I
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    0b00110,
    // J
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b00011,
    0b11011,
    0b11111,
    0b01110,
    // K
    0b11001,
    0b11011,
    0b11111,
    0b11110,
    0b11100,
    0b11000,
    0b11100,
    0b11110,
    0b11111,
    0b11011,
    0b11001,
    // L
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11111,
    0b11111,
    // M
    0b10001,
    0b11011,
    0b11111,
    0b11111,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    // N
    0b10011,
    0b10011,
    0b11011,
    0b11011,
    0b11111,
    0b11111,
    0b11111,
    0b11011,
    0b11011,
    0b11001,
    0b11001,
    // O
    0b01110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11111,
    0b01110,
    // P
    0b11110,
    0b11111,
    0b11011,
    0b11011,
    0b11111,
    0b11110,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    0b11000,
    // Q
    0b01110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11011,
    0b11110,
    0b11111,
    0b01101,
    // R
    0b11110,
    0b11111,
    0b11011,
    0b11011,
    0b11111,
    0b11110,
    0b11110,
    0b11111,
    0b11011,
    0b11011,
    0b11011,
// S
// T
// U
// V
// W
// X
// Y
// Z
// [
// backslash
// ]
// ^
// _
// `
// a
// b
// c
// d
// e
// f
// g
// h
// i
// j
// k
// l
// m
// n
// o
// p
// q
// r
// s
// t
// u
// v
// w
// x
// y
// z
#endif
};

#endif